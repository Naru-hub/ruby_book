h = Hash.new('hello')
a = h[:foo]    #"hello"
b = h[:bar]    #"hello"

# 変数aと変数bは同一オブジェクト
a.equal?(b)     #true

# 変数aに破壊的な変更を適用すると、変数bの値も一緒に変わってしまう
a.upcase!
a   #"HELLO"
b   #"HELLO"
# ハッシュ自身は空のままになっている
h   #{}

# 文字列や配列などミュータブルなオブジェクトを初期値として返す場合はHash.newとブロックを組み合わせて初期値を返すことで
# 上のような問題を避けることができる
# キーが見つからないとブロックがその都度実行されブロックの戻り値が初期値になる
h = Hash.new{'hello'}
a = h[:foo]    #"hello"
b = h[:bar]    #"hello"

# 変数aと変数bは異なるオブジェクト（ブロックの実行時に毎回新しい文字列が作成される）
a.equal?(b)  #false

# 変数aに破壊的な変更を適用しても変数bの値は変わらない
a.upcase!
a     #"HELLO"
b     #"hello"
# ハッシュは空のまま
h  #{}

# Hash.newにブロックを与えるとブロック引数としてハッシュ自身と見つからなかったキーが渡されます。
# そこでこのブロック引数を使ってハッシュと初期値も同時に設定するコードもよく使われます
# 初期値を返すだけでなくハッシュに指定されたキーと初期値を同時に設定する
h = Hash.new {|hash,key| hash[key] = 'hello'}
h[:foo]    #"hello"
h[:bar]    #"hello"

# ハッシュにキーと値が追加されている
h      #{:foo=>"hello",:bar=>"hello"}
